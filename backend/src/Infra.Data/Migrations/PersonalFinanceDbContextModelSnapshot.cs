// <auto-generated />
using System;
using Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infra.Data.Migrations
{
    [DbContext(typeof(PersonalFinanceDbContext))]
    partial class PersonalFinanceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.AppLanguageModel", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.HasKey("Id")
                        .HasName("app_language_pk");

                    b.ToTable("app_language", (string)null);
                });

            modelBuilder.Entity("Domain.Models.BalanceModel", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<decimal>("Balance1")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("balance");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("ReferenceMonth")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character(6)")
                        .HasColumnName("reference_month")
                        .IsFixedLength()
                        .HasComment("Information with format YYYYMM");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("UserId")
                        .HasName("balance_pk");

                    b.ToTable("balance", (string)null);
                });

            modelBuilder.Entity("Domain.Models.EntryCategoryModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<short>("EntryTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("entry_type_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("entry_category_pk");

                    b.HasIndex("EntryTypeId")
                        .HasDatabaseName("ix_entry_category_entry_type_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_entry_category_user_id");

                    b.ToTable("entry_category", (string)null);
                });

            modelBuilder.Entity("Domain.Models.EntryModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entry_date");

                    b.Property<short>("EntryTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("entry_type_id");

                    b.Property<long>("IssuerId")
                        .HasColumnType("bigint")
                        .HasColumnName("issuer_id");

                    b.Property<string>("Note")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("note");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<decimal>("Value")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("entry_pk");

                    b.HasIndex("EntryTypeId")
                        .HasDatabaseName("ix_entry_entry_type_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_entry_user_id");

                    b.ToTable("entry", (string)null);
                });

            modelBuilder.Entity("Domain.Models.EntrySubcategoryModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("entry_subcategory_pk");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_entry_subcategory_category_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_entry_subcategory_user_id");

                    b.ToTable("entry_subcategory", (string)null);
                });

            modelBuilder.Entity("Domain.Models.EntryTypeModel", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("entry_type_pk");

                    b.ToTable("entry_type", (string)null);
                });

            modelBuilder.Entity("Domain.Models.IssuerModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<long>("EntrySubcategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("entry_subcategory_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("issuer_pk");

                    b.HasIndex("EntrySubcategoryId")
                        .HasDatabaseName("ix_issuer_entry_subcategory_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_issuer_user_id");

                    b.ToTable("issuer", (string)null);
                });

            modelBuilder.Entity("Domain.Models.TemplateEntryCategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<short>("AppLanguageId")
                        .HasColumnType("smallint")
                        .HasColumnName("app_language_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<short>("EntryTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("entry_type_id");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("template_entry_category_pk");

                    b.HasIndex("AppLanguageId")
                        .HasDatabaseName("ix_template_entry_category_app_language_id");

                    b.HasIndex("EntryTypeId")
                        .HasDatabaseName("ix_template_entry_category_entry_type_id");

                    b.ToTable("template_entry_category", (string)null);
                });

            modelBuilder.Entity("Domain.Models.TemplateEntrySubcategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<short>("AppLanguageId")
                        .HasColumnType("smallint")
                        .HasColumnName("app_language_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("template_entry_subcategory_pk");

                    b.HasIndex("AppLanguageId")
                        .HasDatabaseName("ix_template_entry_subcategory_app_language_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_template_entry_subcategory_category_id");

                    b.ToTable("template_entry_subcategory", (string)null);
                });

            modelBuilder.Entity("Domain.Models.UserModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<TimeOnly>("Updated")
                        .HasColumnType("time without time zone")
                        .HasColumnName("updated");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("user_pk");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Domain.Models.BalanceModel", b =>
                {
                    b.HasOne("Domain.Models.UserModel", "User")
                        .WithOne("Balance")
                        .HasForeignKey("Domain.Models.BalanceModel", "UserId")
                        .IsRequired()
                        .HasConstraintName("balance_fk_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.EntryCategoryModel", b =>
                {
                    b.HasOne("Domain.Models.EntryTypeModel", "EntryType")
                        .WithMany("EntryCategories")
                        .HasForeignKey("EntryTypeId")
                        .IsRequired()
                        .HasConstraintName("entry_category_fk_entry_type");

                    b.HasOne("Domain.Models.UserModel", "User")
                        .WithMany("EntryCategories")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("entry_category_fk_user");

                    b.Navigation("EntryType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.EntryModel", b =>
                {
                    b.HasOne("Domain.Models.EntryTypeModel", "EntryType")
                        .WithMany("Entries")
                        .HasForeignKey("EntryTypeId")
                        .IsRequired()
                        .HasConstraintName("entry_fk_entry_type");

                    b.HasOne("Domain.Models.UserModel", "User")
                        .WithMany("Entries")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("entry_fk_user");

                    b.Navigation("EntryType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.EntrySubcategoryModel", b =>
                {
                    b.HasOne("Domain.Models.EntryCategoryModel", "Category")
                        .WithMany("EntrySubcategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("entry_subcategory_fk_category");

                    b.HasOne("Domain.Models.UserModel", "User")
                        .WithMany("EntrySubcategories")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("entry_subcategory_fk_user");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.IssuerModel", b =>
                {
                    b.HasOne("Domain.Models.EntrySubcategoryModel", "EntrySubcategory")
                        .WithMany("Issuers")
                        .HasForeignKey("EntrySubcategoryId")
                        .IsRequired()
                        .HasConstraintName("issuer_fk_subcategory");

                    b.HasOne("Domain.Models.UserModel", "User")
                        .WithMany("Issuers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("issuer_fk_user");

                    b.Navigation("EntrySubcategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.TemplateEntryCategoryModel", b =>
                {
                    b.HasOne("Domain.Models.AppLanguageModel", "AppLanguage")
                        .WithMany("TemplateEntryCategories")
                        .HasForeignKey("AppLanguageId")
                        .IsRequired()
                        .HasConstraintName("template_entry_category_fk_app_language");

                    b.HasOne("Domain.Models.EntryTypeModel", "EntryType")
                        .WithMany("TemplateEntryCategories")
                        .HasForeignKey("EntryTypeId")
                        .IsRequired()
                        .HasConstraintName("template_entry_category_fk_entry_type");

                    b.Navigation("AppLanguage");

                    b.Navigation("EntryType");
                });

            modelBuilder.Entity("Domain.Models.TemplateEntrySubcategoryModel", b =>
                {
                    b.HasOne("Domain.Models.AppLanguageModel", "AppLanguage")
                        .WithMany("TemplateEntrySubcategories")
                        .HasForeignKey("AppLanguageId")
                        .IsRequired()
                        .HasConstraintName("template_entry_subcategory_fk_app_language");

                    b.HasOne("Domain.Models.TemplateEntryCategoryModel", "Category")
                        .WithMany("TemplateEntrySubcategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("template_entry_subcategory_fk_category");

                    b.Navigation("AppLanguage");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Models.AppLanguageModel", b =>
                {
                    b.Navigation("TemplateEntryCategories");

                    b.Navigation("TemplateEntrySubcategories");
                });

            modelBuilder.Entity("Domain.Models.EntryCategoryModel", b =>
                {
                    b.Navigation("EntrySubcategories");
                });

            modelBuilder.Entity("Domain.Models.EntrySubcategoryModel", b =>
                {
                    b.Navigation("Issuers");
                });

            modelBuilder.Entity("Domain.Models.EntryTypeModel", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("EntryCategories");

                    b.Navigation("TemplateEntryCategories");
                });

            modelBuilder.Entity("Domain.Models.TemplateEntryCategoryModel", b =>
                {
                    b.Navigation("TemplateEntrySubcategories");
                });

            modelBuilder.Entity("Domain.Models.UserModel", b =>
                {
                    b.Navigation("Balance");

                    b.Navigation("Entries");

                    b.Navigation("EntryCategories");

                    b.Navigation("EntrySubcategories");

                    b.Navigation("Issuers");
                });
#pragma warning restore 612, 618
        }
    }
}
